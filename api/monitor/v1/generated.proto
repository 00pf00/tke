/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2019 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package tkestack.io.tke.api.monitor.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

message AlarmEvaluator {
  optional string type = 1;

  optional string value = 2;
}

message AlarmMetric {
  optional string measurement = 1;

  optional string metricName = 2;

  optional int64 continuePeriod = 3;

  // +optional
  optional string displayName = 4;

  // +optional
  optional AlarmEvaluator evaluator = 5;

  // +optional
  optional string unit = 6;
}

message AlarmNotifyWay {
  optional string channelName = 1;

  optional string templateName = 2;
}

// AlarmPolicy is a policy of alarm system.
message AlarmPolicy {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of alarm policies in this set.
  // +optional
  optional AlarmPolicySpec spec = 2;

  // +optional
  optional AlarmPolicyStatus status = 3;
}

// AlarmPolicyList is the whole list of all alarm policies which owned by a tenant.
message AlarmPolicyList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of alarm policies.
  repeated AlarmPolicy items = 2;
}

// AlarmPolicySpec describes the attributes on an alarm policy.
message AlarmPolicySpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  optional string type = 3;

  // +patchMergeKey=metricName
  // +patchStrategy=merge
  repeated AlarmMetric metrics = 4;

  optional string objects = 5;

  optional string objectsType = 6;

  optional int64 statisticsPeriod = 7;

  // +optional
  optional string namespace = 8;

  // +optional
  optional string workloadType = 9;

  // +optional
  // +patchStrategy=merge
  repeated string receiverGroups = 10;

  // +optional
  // +patchStrategy=merge
  repeated string receivers = 11;

  // +optional
  // +patchMergeKey=templateName
  // +patchStrategy=merge
  repeated AlarmNotifyWay notifyWays = 12;
}

// AlarmPolicyStatus is information about the current status of a AlarmPolicy.
message AlarmPolicyStatus {
  // +optional
  optional string phase = 1;

  // The last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 2;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 3;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 4;
}

// Collector is a monitor component.
message Collector {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of clusters in this set.
  // +optional
  optional CollectorSpec spec = 2;

  // +optional
  optional CollectorStatus status = 3;
}

// CollectorList is the whole list of all collectors which owned by a tenant.
message CollectorList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Collector
  repeated Collector items = 2;
}

// CollectorSpec describes the attributes on a Collector.
message CollectorSpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  // +optional
  optional string type = 3;

  // Version is the components version.
  // +optional
  optional string version = 4;

  // Storage is the remote address for collector when writing/reading outside of cluster.
  // +optional
  optional CollectorStorage storage = 5;

  // NotifyWebhook is the address that alert messages send to, optional. If not set, a default webhook address "https://[notify-api-address]/webhook" will be used.
  // +optional
  optional string notifyWebhook = 6;
}

// CollectorStatus is information about the current status of a Collector.
message CollectorStatus {
  // Version is the version of collector.
  // +optional
  optional string version = 1;

  // Components is the components version such as node-exporter and alert manager.
  // +optional
  map<string, string> components = 2;

  // Phase is the current lifecycle phase of the helm of cluster.
  // +optional
  optional string phase = 3;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 4;

  // RetryCount is a int between 0 and 5 that describes the time of retrying initializing.
  // +optional
  optional int32 retryCount = 5;

  // LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastReInitializingTimestamp = 6;
}

// CollectorStorage is the remote write/read address for collector.
message CollectorStorage {
  repeated string writeAddr = 1;

  repeated string readAddr = 2;
}

// ConfigMap holds configuration data for tke to consume.
message ConfigMap {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Data contains the configuration data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // Values with non-UTF-8 byte sequences must use the BinaryData field.
  // The keys stored in Data must not overlap with the keys in
  // the BinaryData field, this is enforced during validation process.
  // +optional
  map<string, string> data = 2;

  // BinaryData contains the binary data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // BinaryData can contain byte sequences that are not in the UTF-8 range.
  // The keys stored in BinaryData must not overlap with the ones in
  // the Data field, this is enforced during validation process.
  // +optional
  map<string, bytes> binaryData = 3;
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
message ConfigMapList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ConfigMaps.
  repeated ConfigMap items = 2;
}

// Metric defines the structure for querying monitoring data requests and results.
message Metric {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional MetricQuery query = 2;

  // +optional
  optional string jsonResult = 3;
}

// MetricList is the whole list of all metrics.
message MetricList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of metrics
  repeated Metric items = 2;
}

message MetricQuery {
  optional string table = 1;

  // +optional
  optional int64 startTime = 2;

  // +optional
  optional int64 endTime = 3;

  repeated string fields = 4;

  repeated MetricQueryCondition conditions = 5;

  // +optional
  optional string orderBy = 6;

  // +optional
  optional string order = 7;

  repeated string groupBy = 8;

  optional int32 limit = 9;

  optional int32 offset = 10;
}

message MetricQueryCondition {
  optional string key = 1;

  optional string expr = 2;

  optional string value = 3;
}

