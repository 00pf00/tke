/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2019 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	scheme "tkestack.io/tke/api/client/clientset/versioned/scheme"
	v1 "tkestack.io/tke/api/registry/v1"
)

// ChartsGetter has a method to return a ChartInterface.
// A group's client should implement this interface.
type ChartsGetter interface {
	Charts(namespace string) ChartInterface
}

// ChartInterface has methods to work with Chart resources.
type ChartInterface interface {
	Create(*v1.Chart) (*v1.Chart, error)
	Update(*v1.Chart) (*v1.Chart, error)
	UpdateStatus(*v1.Chart) (*v1.Chart, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.Chart, error)
	List(opts metav1.ListOptions) (*v1.ChartList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Chart, err error)
	ChartExpansion
}

// charts implements ChartInterface
type charts struct {
	client rest.Interface
	ns     string
}

// newCharts returns a Charts
func newCharts(c *RegistryV1Client, namespace string) *charts {
	return &charts{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the chart, and returns the corresponding chart object, and an error if there is any.
func (c *charts) Get(name string, options metav1.GetOptions) (result *v1.Chart, err error) {
	result = &v1.Chart{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("charts").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Charts that match those selectors.
func (c *charts) List(opts metav1.ListOptions) (result *v1.ChartList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.ChartList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("charts").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested charts.
func (c *charts) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("charts").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a chart and creates it.  Returns the server's representation of the chart, and an error, if there is any.
func (c *charts) Create(chart *v1.Chart) (result *v1.Chart, err error) {
	result = &v1.Chart{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("charts").
		Body(chart).
		Do().
		Into(result)
	return
}

// Update takes the representation of a chart and updates it. Returns the server's representation of the chart, and an error, if there is any.
func (c *charts) Update(chart *v1.Chart) (result *v1.Chart, err error) {
	result = &v1.Chart{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("charts").
		Name(chart.Name).
		Body(chart).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *charts) UpdateStatus(chart *v1.Chart) (result *v1.Chart, err error) {
	result = &v1.Chart{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("charts").
		Name(chart.Name).
		SubResource("status").
		Body(chart).
		Do().
		Into(result)
	return
}

// Delete takes name of the chart and deletes it. Returns an error if one occurs.
func (c *charts) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("charts").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *charts) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("charts").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched chart.
func (c *charts) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Chart, err error) {
	result = &v1.Chart{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("charts").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
